# Turbulence simulation

nout = 10      # Number of output steps
timestep = 10  # Output timestep, normalised ion cyclotron times [1/Omega_ci]

MZ = 81       # Number of points in Z (toroidal) direction

zperiod = 5   # Fraction of a torus to simulate

[mesh]

file = "tokamak.nc"

extrapolate_y = false  # Can result in negative Jacobians in guard cells

[mesh:paralleltransform]
type = shifted

[solver]

use_precon = true
mxstep = 100000
cvode_max_order = 3

[hermes]
components = (e, d+, sound_speed, vorticity,
              sheath_boundary, collisions,
              diamagnetic_drift, classical_diffusion,
              polarisation_drift
              )

Nnorm = 1e19 # Reference density [m^-3]
Bnorm = 1    # Reference magnetic field [T]
Tnorm = 50   # Reference temperature [eV]

loadmetric = false  # Recalculate metric tensor? (false -> use grid values)
normalise_metric = true   # Apply normalisation to metric tensor?

[polarisation_drift]
advection = false     # Include advection of fluid quantities?
diamagnetic_polarisation = true
average_atomic_mass = vorticity:average_atomic_mass

[diamagnetic_drift]
diamag_form = x * (1 - x)  # 0 = gradient; 1 = divergence

[vorticity]

exb_advection_simplified = false
diamagnetic = true              # Include diamagnetic current?
diamagnetic_polarisation = true # Include diamagnetic drift in polarisation current?
average_atomic_mass = `d+:AA`   # Weighted average atomic mass, for polarisaion current
poloidal_flows = true           # Include poloidal ExB flow
split_n0 = false                # Split phi into n=0 and n!=0 components

phi_dissipation = true          # Parallel dissipation based on phi derivatives?
phi_sheath_dissipation = true   # Parallel dissipation at sheath boundary?
damp_core_vorticity = true      # Friction with core plasma, damp poloidal flow at core boundary?

phi_boundary_relax = true       # Relaxation of radial boundary potential?
phi_boundary_timescale = 1e-6   # Relaxation timescale [seconds]

################################################################
# Electrons

[e]
type = evolve_density, evolve_pressure, evolve_momentum

AA = 1 / 1836    # Atomic mass of electrons
charge = -1      # Charge of electrons

poloidal_flows = true   # Include poloidal ExB flow?

diagnose = true  # Save additional diagnostics?

low_n_diffuse_perp = true  # Cross-field diffusion at low density?

[Ne]
neumann_boundary_average_z = true # Neumann average Z boundaries in X

function = 3.0 - 2.7*x + 1e-3*mixmode(x - z)

flux = 3e21 # /s

# Source calibration factor
# sum( Se_src[x,y] * J*dx*dy*2pi )
# Note: Depends on source shape and mesh
shape_factor = 1.0061015504152746

source = flux * shape_factor * exp(-((x - 0.05)/0.05)^2)
source_only_in_core = true

[Pe]
neumann_boundary_average_z = true # Neumnn average Z boundaries in X

function = 3*(1.0 - 0.9*x)^2

heating = 60e3 # Power input per species [W]

T_source = heating / (Ne:flux * 1.602e-19 * 1.5) # Calculate source temperature from heating power

source = Ne:source * T_source * 1.602e-19  # Electron pressure source
source_only_in_core = true   # Zero source in open field line regions?

################################################################
# Deuterium ions
[d+]
# Set ion density from quasineutrality
type = quasineutral, evolve_pressure, evolve_momentum

AA = 2       # Ion atomic mass
charge = 1

poloidal_flows = true

low_n_diffuse_perp = true

[Pd+]
neumann_boundary_average_z = true # Neumann average boundaries in X

function = 3*(1.0 - 0.9*x)^2

source = Pe:source
source_only_in_core = true

