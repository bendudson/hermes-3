
nout = 1
timestep = 10

TwistShift = false  # use twist-shift condition?
ballooning = false  # ballooning transformation?
shiftinitial = false
ShiftWithoutTwist=false

MYG=1
MXG=2

grid = "mms-data/circ_grid_0.nc"

NXPE=1

dump_format = nc


[mesh]
symmetricGlobalX = true
extrapolate_y = false


[mesh_0]
file = "mms-data/circ_grid_0.nc"
symmetricGlobalX = false
extrapolate_y = false

[mesh_1]
file = "mms-data/circ_grid_1.nc"
symmetricGlobalX = false
extrapolate_y = false

[field_0]
function = sin(R)


[input]
error_on_unused_options=false

##################################################
# derivative methods

[ddx]

first = C2
second = C2
upwind = W3

[ddy]

first = C2
second = C2
upwind = W3

[ddz]

first = C2
second = C2
upwind = W3

###################################################
# Time-integration solver

[solver]

# Note: If evolving neutrals, need preconditioning
type = beuler
#use_precon = true

atol = 1.0e-10  # absolute tolerance
rtol = 1.0e-5   # relative tolerance
mxstep = 1000000  # Maximum internal steps per output

cvode_max_order = 2
cvode_stability_limit_detection = true

[laplace]  # This is used for Delp2 operator
all_terms = true
nonuniform = true

##################################################
# Electrostatic potential solver

[phiSolver]
type   = petsc  # Needed if Boussinesq = false

ksptype = gmres # Linear iterative method

pctype = hypre # Preconditioner. Direct "lu" or "ilu"; iterative "jacobi", "sor"

atol=1e-12
rtol = 1e-8
# Set package to perform factorisation for direct solves
# "petsc" built-in solver only serial
# "superlu", "superlu_dist", "mumps", "cusparse"
factor_package = superlu_dist

inner_boundary_flags = 0
outer_boundary_flags = 0

all_terms = true #false
nonuniform = true   # NOTE: Necessary to avoid numerical instability


[laplacexz]
type = petsc

rtol=1e-8
atol=1e-12

ksptype = gmres   # Linear iterative method

pctype  = hypre   # Preconditioner. Direct "lu" or "ilu"; iterative "jacobi", "sor"

# Set package to perform factorisation for direct solves
# "petsc" built-in solver only serial
# "superlu", "superlu_dist", "mumps", "cusparse"
factor_package = superlu_dist

inner_boundary_flags = 16
outer_boundary_flags = 16

[aparSolver]
type = petsc

rtol=1e-8
atol=1e-12

# ksptype = gmres   # Linear iterative method

# pctype  = hypre   # Preconditioner. Direct "lu" or "ilu"; iterative "jacobi", "sor"

# # Set package to perform factorisation for direct solves
# # "petsc" built-in solver only serial
# # "superlu", "superlu_dist", "mumps", "cusparse"
# factor_package = superlu_dist


inner_boundary_flags = 0
outer_boundary_flags = 0

# all_terms = true
# nonuniform = true

# general settings for the model
[input]

transform_from_field_aligned=False

[Hermes]
show_timesteps = true

loadmetric = false
phiSolver=true
newXZsolver = false
relaxation=true

#######################
# Output variables
output_ddt = false # Output time derivatives
verbose = false     # Output additional fields

#######################
# radial buffers
radial_buffers = false
radial_inner_width = 4
radial_outer_width = 3
radial_buffer_D = 0.1

resistivity_boundary = 0
resistivity_boundary_width = 0

#######################
# Numerical dissipation

vepsi_dissipation = false  # Parallel dissipation on Ve-Vi
vort_dissipation = false
numdiff = 0.01
hyperpar = -1

ne_num_diff = -1e-4
ne_num_hyper = -0.5
vi_num_diff = -1e-4
ve_num_diff = -1
ve_num_hyper = -0.5

x_hyper_viscos = -1e-3
z_hyper_viscos = -1e-3

# Flux limiters
kappa_limit_alpha = -1#0.2 # SOLPS style heat flux limiter
eta_limit_alpha   = -1#0.5 # SOLPS style viscosity limiter

#######################
# Electric field and Ohm's law
electromagnetic = false  # Electromagnetic? Otherwise electrostatic
FiniteElMass = false  # Finite electron mass?

parallel_flow = true

# Electrostatic potential
split_n0 = false  # Solve n=0 separately?
split_n0_psi = false

# NOTE: all currents switched off for fluid run
j_diamag       = false  # Diamagnetic current: Vort <-> Pe
j_par          = true  # Parallel current:    Vort <-> Psi

j_pol_simplified = false
j_pol_pi = false

evolve_te = true
evolve_ti = true

pe_par         = true  # Parallel pressure gradient: Pe <-> Psi
resistivity    = false  # Resistivity: Psi -> Pe
thermal_flux   = false
thermal_force  = false
electron_ion_transfer = false
electron_viscosity = false
ion_viscosity  = false  # Ion parallel viscosity
thermal_conduction = true

frecycle = 0.0  # Neutral gas recycling fraction

carbon_fraction = 0.0

excitation = false # Hydrogen neutral excitation radiation

## Settings for 2D parallel closures
sinks = false
sink_invlpar =  0.2  # 5m parallel connection length
sheath_closure = false
drift_wave = false

#######################
# Transport coefficients
classical_diffusion = false  # Collisional diffusion

anomalous_D = 0.1  # Anomalous density diffusion [m^2/s]
anomalous_chi = 0.5 # Anomalous thermal diffusion [m^2/s]
anomalous_nu = -0.5   # Anomalous viscosity

anomalous_D_pepi = false

poloidal_flows = false

ion_velocity   = true

ion_neutral = false
neutral_friction = false  # Friction between plasma and neutrals

boussinesq = true   # Use Boussinesq approximation

# Radial boundary fluxes
ne_bndry_flux = true
pe_bndry_flux = true
vort_bndry_flux = false

ramp_mesh      = false
ramp_timescale = 1e4

#######################
# Plasma sheath
sheath_model = 0  # 0 = Bohm, 1 = Loizu, 2 = Bohm + free density
sheath_yup = false
sheath_ydown = false
sheath_allow_supersonic = false
sheath_gamma_e = 4   # Electron sheath heat transmission
sheath_gamma_i = 2.5 # Ion sheath heat transmission
neutral_gamma = 0.0

parallel_sheaths = true

startprofiles = false

core_sources = false # Only sources in the core
adapt_source = false   # Feedback on profiles (PI controller)
energy_source = false   # Constant power per particle (at fixed x). False -> Constant power per volume
# source_p = 1e-2       # Rate based on current error (1/timescale)
# source_i = 1e-6       # Integral of error (1/timescale^2)
source_vary_g11 = false  # Vary source in poloidal angle to better match radial transport

staggered = false

# Normalisation parameters

# Normalisation factors
Nnorm = 1e+19
Tnorm = 100
Ti0 = 100 # cold-ion
Te0 = 100
Bnorm = 2.5
AA = 1  # Atomic mass. 1 = Hydrogen, 2 = Deuterium

[neutral]
type = none    # Neutral model: none, diffusion2d, recycling, fullvelocity, mixed
viscosity = 1  # Dynamic viscosity
bulk = 0       # Bulk (volume) viscosity
conduction = 1 
neutral_gamma = 0.0

nn_floor = 1e-2  # Floor applied when calculating Vn = NVn / Nn
low_n_equilibriate = -1e-4  # If n < nn_floor, evolve Tn and Vn towards plasma values

[all]
scale = 0.0

bndry_all = neumann_o2
bndry_xin = neumann_o2
bndry_xout = neumann_o2
bndry_par_all = parallel_neumann_o2

[Ne] # Electron density
scale = 1

#function = 0.1 + 0.01*sin(8*pi*x - 9*z)*gauss(x, 0.21)#1 + 0.27*gauss(x, 0.42)#*gauss(z-3*pi/2.,0.21/4.)#*gauss(y-pi,0.26)
function = 1 + .21*gauss(x,0.21)
#function = 1 + 0.1*gauss(x-0.5, 0.14)*gauss(z-pi/2.,0.14/2.) + 0.1*gauss(x-0.5, 0.14)*gauss(z-pi,0.14/2.) + 0.1*gauss(x-0.5, 0.14)*gauss(z,0.14/2.) + 0.1*gauss(x-0.5, 0.14)*gauss(z-3*pi/2.,0.14/2.)

source = 1.4e3*gauss(0.85-x, 0.21)


[Vort]
# bndry_all = dirichlet_o2
# scale = 1   # Fluctuation amplitude
# function = mixmode((x-0.5)) * mixmode(4*z) # Fluctuation function
scale=0#1e-2
function = sin(7*z)*sin(3*x-4*z)*gauss(-x,0.42)
bndry_all = dirichlet_o2

[VePsi] # Ve + 0.5*beta_e*mi_me*psi
# bndry_core = dirichlet_o2#zerolaplace
# bndry_pf   = dirichlet_o2
# bndry_xout = dirichlet_o2

[Pe]  # Electron pressure
scale = 1
#function = 0.1 + 0.01*cos(z)*(sin(8*pi*x - 30*z)+sin(7*z)+0.5*sin(13*z - 2*pi*x))*gauss(-x,0.21)
function = 1+10*(Ne:function-1)
source =  2.8e5*gauss(x, 0.21)

[Pi]
scale = 1
function = Pe:function # + 1.2*(Ne:function-1)
#function = 0.1 + 0.01*cos(z)*(sin(8*pi*x - 30*z)+sin(7*z)+0.5*sin(13*z - 2*pi*x))*gauss(-x,0.21)
source = Pe:source

[Ve]
# parallel_bndry_yup = 1
# parallel_bndry_ydown = -1

[Jpar]
# parallel_bndry_yup = 1
# parallel_bndry_ydown = -1

[phi]
# Radial boundaries determined by Laplacian inversion
bndry_xin = none
bndry_xout = none

bndry_all = neumann_o2

# bndry_par_yup_xout = none
# bndry_par_ydown_xout = none
# bndry_par_yup_xin = none
# bndry_par_ydown_xin = none
